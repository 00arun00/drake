function runLCMPlant(plant,lcm_coder,options)
% Runs a plant as a standalone LCM node

% todo: ?? handle other plant sfunction inputs (hybrid plants, mdl filenames, ...
%typecheck(plant,'Plant');

typecheck(lcm_coder,'LCMCoder');

if (nargin<3) options = struct(); end
if (~isfield(options,'tspan')) options.tspan = [0,inf]; end
if (~isfield(options,'dt')) options.dt = 0.01; end

% todo: implement options (tspan, x0, publish_dt, ode options)

assignin('base','simpleLCMNode_lcm_coder',lcm_coder);
assignin('base','simpleLCMNode_plantobj',plant);

load_system('simpleLCMNode');

set_param('simpleLCMNode/realtime','sample_time',num2str(options.dt))
set_param('simpleLCMNode/lcmInput',...
  'channel','[lower(getRobotName(simpleLCMNode_lcm_coder)),''_u'']', ...
  'dim',num2str(lcm_coder.dim_u), ...
  'decode_fcn','@(msg)decodeU(simpleLCMNode_lcm_coder,msg)', ...
  'sample_time',num2str(options.dt));
set_param('simpleLCMNode/system',...
  'FunctionName','PlantSFunction', ...
  'Parameters','simpleLCMNode_plantobj');
set_param('simpleLCMNode/lcmOutput',...
  'channel','[lower(getRobotName(simpleLCMNode_lcm_coder)),''_xhat'']', ...
  'dim',num2str(lcm_coder.dim_x), ...
  'encode_fcn','@(t,x)encodeX(simpleLCMNode_lcm_coder,t,x)', ...
  'sample_time',num2str(options.dt));

sim('simpleLCMNode',options.tspan);