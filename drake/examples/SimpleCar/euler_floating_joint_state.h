// Copyright 2016 Robot Locomotion Group @ CSAIL. All rights reserved.
#pragma once

// This file is generated by a script.  Do not edit!
// See drake/examples/SimpleCar/lcm_vector_gen.py.

#include <stdexcept>
#include <string>
#include <Eigen/Core>

#include "lcmtypes/drake/lcmt_euler_floating_joint_state_t.hpp"

namespace Drake {

struct EulerFloatingJointStateIndices {
  enum Enum {
    kX = 0,
    kY = 1,
    kZ = 2,
    kRoll = 3,
    kPitch = 4,
    kYaw = 5,
  };
};

/// Models the Drake::LCMVector concept.
template <typename ScalarType = double>
class EulerFloatingJointState : private EulerFloatingJointStateIndices {
 public:
  typedef drake::lcmt_euler_floating_joint_state_t LCMMessageType;
  static std::string channel() { return "EULER_FLOATING_JOINT_STATE"; }

  static const int RowsAtCompileTime = Eigen::Dynamic;
  typedef Eigen::Matrix<ScalarType, RowsAtCompileTime, 1> EigenType;
  size_t size() const { return 6; }

  EulerFloatingJointState() : value_(Eigen::Matrix<ScalarType, 6, 1>::Zero()) {}

  template <typename Derived>
  // NOLINTNEXTLINE(runtime/explicit)
  EulerFloatingJointState(const Eigen::MatrixBase<Derived>& other)
      : value_(other.segment(0, 6)) {}

  template <typename Derived>
  EulerFloatingJointState& operator=(const Eigen::MatrixBase<Derived>& other) {
    value_ = other.segment(0, 6);
    return *this;
  }

  friend EigenType toEigen(const EulerFloatingJointState<ScalarType>& vec) {
    return vec.value_;
  }

  friend std::string getCoordinateName(
      const EulerFloatingJointState<ScalarType>& vec, unsigned int index) {
    switch (index) {
      case kX:
        return "x";
      case kY:
        return "y";
      case kZ:
        return "z";
      case kRoll:
        return "roll";
      case kPitch:
        return "pitch";
      case kYaw:
        return "yaw";
    }
    throw std::domain_error("unknown coordinate index");
  }

  ScalarType& x() { return value_(kX); }
  const ScalarType& x() const { return value_(kX); }

  ScalarType& y() { return value_(kY); }
  const ScalarType& y() const { return value_(kY); }

  ScalarType& z() { return value_(kZ); }
  const ScalarType& z() const { return value_(kZ); }

  ScalarType& roll() { return value_(kRoll); }
  const ScalarType& roll() const { return value_(kRoll); }

  ScalarType& pitch() { return value_(kPitch); }
  const ScalarType& pitch() const { return value_(kPitch); }

  ScalarType& yaw() { return value_(kYaw); }
  const ScalarType& yaw() const { return value_(kYaw); }

 private:
  EigenType value_;
};

template <typename ScalarType>
bool encode(const double& t, const EulerFloatingJointState<ScalarType>& wrap,
            // NOLINTNEXTLINE(runtime/references)
            drake::lcmt_euler_floating_joint_state_t& msg) {
  msg.timestamp = static_cast<int64_t>(t * 1000);
  msg.x = wrap.x();
  msg.y = wrap.y();
  msg.z = wrap.z();
  msg.roll = wrap.roll();
  msg.pitch = wrap.pitch();
  msg.yaw = wrap.yaw();
  return true;
}

template <typename ScalarType>
bool decode(const drake::lcmt_euler_floating_joint_state_t& msg,
            // NOLINTNEXTLINE(runtime/references)
            double& t,
            // NOLINTNEXTLINE(runtime/references)
            EulerFloatingJointState<ScalarType>& wrap) {
  t = static_cast<double>(msg.timestamp) / 1000.0;
  wrap.x() = msg.x;
  wrap.y() = msg.y;
  wrap.z() = msg.z;
  wrap.roll() = msg.roll;
  wrap.pitch() = msg.pitch;
  wrap.yaw() = msg.yaw;
  return true;
}

}  // namespace Drake
