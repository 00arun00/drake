// Copyright 2016 Robot Locomotion Group @ CSAIL. All rights reserved.
#pragma once

// This file is generated by a script.  Do not edit!
// See drake/examples/SimpleCar/lcm_vector_gen.py.

#include <stdexcept>
#include <string>
#include <Eigen/Core>

#include "lcmtypes/drake/lcmt_driving_command_t.hpp"

namespace Drake {

struct DrivingCommandIndices {
  static const int kSteeringAngle = 0;
  static const int kThrottle = 1;
  static const int kBrake = 2;
};

/// Models the Drake::LCMVector concept.
template <typename ScalarType = double>
class DrivingCommand {
 public:
  typedef drake::lcmt_driving_command_t LCMMessageType;
  static std::string channel() { return "DRIVING_COMMAND"; }

  static const int RowsAtCompileTime = Eigen::Dynamic;
  typedef Eigen::Matrix<ScalarType, RowsAtCompileTime, 1> EigenType;
  size_t size() const { return 3; }

  DrivingCommand() : value_(Eigen::Matrix<ScalarType, 3, 1>::Zero()) {}

  template <typename Derived>
  // NOLINTNEXTLINE(runtime/explicit)
  DrivingCommand(const Eigen::MatrixBase<Derived>& other)
      : value_(other.segment(0, 3)) {}

  template <typename Derived>
  DrivingCommand& operator=(const Eigen::MatrixBase<Derived>& other) {
    value_ = other.segment(0, 3);
    return *this;
  }

  friend EigenType toEigen(const DrivingCommand<ScalarType>& vec) {
    return vec.value_;
  }

  friend std::string getCoordinateName(const DrivingCommand<ScalarType>& vec,
                                       unsigned int index) {
    switch (index) {
      case K::kSteeringAngle:
        return "steering_angle";
      case K::kThrottle:
        return "throttle";
      case K::kBrake:
        return "brake";
    }
    throw std::domain_error("unknown coordinate index");
  }

  ScalarType& steering_angle() { return value_(K::kSteeringAngle); }
  const ScalarType& steering_angle() const { return value_(K::kSteeringAngle); }

  ScalarType& throttle() { return value_(K::kThrottle); }
  const ScalarType& throttle() const { return value_(K::kThrottle); }

  ScalarType& brake() { return value_(K::kBrake); }
  const ScalarType& brake() const { return value_(K::kBrake); }

 private:
  typedef DrivingCommandIndices K;
  EigenType value_;
};

template <typename ScalarType>
bool encode(const double& t, const DrivingCommand<ScalarType>& wrap,
            // NOLINTNEXTLINE(runtime/references)
            drake::lcmt_driving_command_t& msg) {
  msg.timestamp = static_cast<int64_t>(t * 1000);
  msg.steering_angle = wrap.steering_angle();
  msg.throttle = wrap.throttle();
  msg.brake = wrap.brake();
  return true;
}

template <typename ScalarType>
bool decode(const drake::lcmt_driving_command_t& msg,
            // NOLINTNEXTLINE(runtime/references)
            double& t,
            // NOLINTNEXTLINE(runtime/references)
            DrivingCommand<ScalarType>& wrap) {
  t = static_cast<double>(msg.timestamp) / 1000.0;
  wrap.steering_angle() = msg.steering_angle;
  wrap.throttle() = msg.throttle;
  wrap.brake() = msg.brake;
  return true;
}

}  // namespace Drake
