{
    <dl-1>
    Memcheck:Leak
    ...
    fun:_dl_init
    ...
}

{
    <dl-2>
    Memcheck:Leak
    ...
    fun:_dlerror_run
}

{
    <dyld-1>
    Memcheck:Cond
    ...
    fun:_ZN4dyld4loadEPKcRKNS_11LoadContextE
}

{
    <dyld-2>
    Memcheck:Value8
    ...
    fun:_ZN4dyld4loadEPKcRKNS_11LoadContextE
}

{
    <glib-1>
    Memcheck:Leak
    ...
    fun:g_slice_alloc
    ...
}

{
   <mosek-1>
   Memcheck:Addr4
   ...
   fun:checkout_from_flexlm
   ...
}

{
   <mosek-2>
   Memcheck:Addr16
   ...
   fun:checkout_from_flexlm
   ...
}

{
   <mosek-3>
   Memcheck:Cond
   ...
   fun:MSK_sysenv_getsysinfo
   ...
}

{
    <python-1>
    Memcheck:Addr4
    fun:PyObject_Free
    ...
}

{
    <python-2>
    Memcheck:Cond
    fun:PyObject_Free
    ...
}

{
    <python-3>
    Memcheck:Value8
    fun:PyObject_Free
    ...
}

{
    <python-4>
    Memcheck:Addr4
    obj:/usr/bin/python2.7
    ...
}

{
    <python-5>
    Memcheck:Addr4
    obj:/usr/local/bin/python
    ...
}

{
    <python-6>
    Memcheck:Cond
    obj:/usr/bin/python2.7
    ...
}

{
    <python-7>
    Memcheck:Cond
    obj:/usr/local/bin/python
    ...
}

{
    <python-8>
    Memcheck:Leak
    ...
    obj:/usr/bin/python2.7
}

{
    <python-9>
    Memcheck:Leak
    ...
    obj:/usr/local/bin/python
}

{
    <python-10>
    Memcheck:Value8
    obj:/usr/bin/python2.7
    ...
}

{
    <python-11>
    Memcheck:Value8
    obj:/usr/local/bin/python
    ...
}

# This suppresses "possibly lost" warnings for valgrind memchecks.
# The cause of the error seems to be in the btAlignedAllocDefault function
# in btAlignedAllocator.cpp file of the bullet3 library.  We believe that the function
# may return a pointer not pointing at the head of the allocated memory, which
# causes the "possibly lost" warnings. [ *((void **)(ret)-1) = (void *)(real); ]
{
    <bullet3-1>
    Memcheck:Leak
    match-leak-kinds: possible
    fun:malloc
    fun:_ZL14btAllocDefaultm
    fun:_ZL21btAlignedAllocDefaultmi
    fun:_Z22btAlignedAllocInternalmi
}

# These memory leaks seem to be caused by EXPECT_DEATHs, when we remove those expectations
# all the problems in urdf_parser_test and pid_controller_test go away.
# static const std::string days[] { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
# In file pattern_formatter_impl.h
{
    <ubuntu-14.04-1>
    Memcheck:Leak
    match-leak-kinds: possible
    fun:_Znwm
    fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
    fun:_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag
    fun:_ZNSsC1EPKcRKSaIcE
    # This function is :
    # std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)
    # This is giving "possibly lost" warnings at multiple places wherever string are used.
    # On line world_body->set_name( <string>) in file rigid_body_tree.cc
    # On line string model_name = node->Attribute("name"); in file file urdf_parser.cc
    # etc.
}

# operator= [ EXPECT_DEATH ]
# In file urdf_parser.cc
{
    <ubuntu-14.04-2>
    Memcheck:Leak
    match-leak-kinds: possible
    fun:_Znwm
    fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
    fun:_ZNSs9_M_mutateEmmm
    fun:_ZNSs15_M_replace_safeEmmPKcm
}

# substr function [ root_dir = filename.substr(0, found); ]
# in file urdf_parser.cc
{
    <ubuntu-14.04-3>
    Memcheck:Leak
    match-leak-kinds: possible
    fun:_Znwm
    fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
    fun:_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag
    fun:_ZNSsC1ERKSsmm
    fun:_ZNKSs6substrEmm
}

# append function in file urdf_parser_test.cc
#  const string root = GetDrakePath() + "/multibody/parsers/test/urdf_parser_test/";
{
    <ubuntu-14.04-4>
    Memcheck:Leak
    match-leak-kinds: possible
   fun:_Znwm
   fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
   fun:_ZNSs4_Rep8_M_cloneERKSaIcEm
   fun:_ZNSs7reserveEm
   fun:_ZNSs6appendERKSs
}

# str function: DRAKE_ABORT_MSG(error_buff.str().c_str());
# in file urdf_parser.cc
{
    <ubuntu-14.04-5>
    Memcheck:Leak
    match-leak-kinds: possible
    fun:_Znwm
    fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
    fun:_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag
    fun:_ZNKSt18basic_stringstreamIcSt11char_traitsIcESaIcEE3strEv
}

# Google Test string leakage, gtest.cc
# result.reserve(2 * (end - start));
{
   <ubuntu-14.04-6>
   Memcheck:Leak
   match-leak-kinds: possible
   fun:_Znwm
   fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
   fun:_ZNSs4_Rep8_M_cloneERKSaIcEm
   fun:_ZNSs7reserveEm
   fun:_ZN7testing8internal20StringStreamToStringEPSt18basic_stringstreamIcSt11char_traitsIcESaIcEE
   fun:_ZNK7testing7Message9GetStringEv
   fun:_ZN7testing8internal18StreamableToStringIPcEESsRKT_
   fun:_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_
   fun:_ZN7testing14InitGoogleTestEPiPPc
   fun:main
}

{
   <ubuntu-14.04-7>  
   Memcheck:Leak
   match-leak-kinds: possible
   fun:_Znwm
   fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
   fun:_ZNSs4_Rep8_M_cloneERKSaIcEm
   fun:_ZNSs7reserveEm
   fun:_ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEE8overflowEi
}

# append function urdf_parser_test.cc
# const string file_duplicate = root + "duplicate_materials.urdf";
{
   <ubuntu-14.04-8>  
   Memcheck:Leak
   match-leak-kinds: possible
   fun:_Znwm
   fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
   fun:_ZNSs4_Rep8_M_cloneERKSaIcEm
   fun:_ZNSs7reserveEm
   fun:_ZNSs6appendEPKcm
}

# Leak from standard libraries.
{
    <ubuntu-14.04-8>  
    Memcheck:Leak
    match-leak-kinds: possible
    fun:_Znwm
    fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
    fun:_ZNSs4_Rep8_M_cloneERKSaIcEm
    fun:_ZNSs7reserveEm
    fun:_ZNSs9push_backEc
    fun:_ZNSt20back_insert_iteratorISsEaSERKc
    fun:_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcSt20back_insert_iteratorISsEEET0_T_S8_S7_
    fun:_ZSt13__copy_move_aILb0EPKcSt20back_insert_iteratorISsEET1_T0_S5_S4_
    fun:_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKcSsEESt20back_insert_iteratorISsEET1_T0_S8_S7_
    fun:_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSsEESt20back_insert_iteratorISsEET0_T_S8_S7_
    fun:_ZSt13regex_replaceISt20back_insert_iteratorISsEN9__gnu_cxx17__normal_iteratorIPKcSsEESt12regex_traitsIcEcET_S9_T0_SA_RKSt11basic_regexIT2_T1_EPKSC_NSt15regex_constants15match_flag_typeE
    fun:_ZSt13regex_replaceISt20back_insert_iteratorISsEN9__gnu_cxx17__normal_iteratorIPKcSsEESt12regex_traitsIcEcSt11char_traitsIcESaIcEET_SC_T0_SD_RKSt11basic_regexIT2_T1_ERKSbISF_T3_T4_ENSt15regex_constants15match_flag_typeE
}
